
					<div id="heading">Personal Projects</div>
					<div class="card first-card" id="project-1">
						<div class="heading">Falling Balls</div>
						<div class="desc">
							2D Android game built using the Android SDK. Implemented Java classes to manipulate position vectors and handle game physics. Implemented collision detection and response. Used the AdMob SDK to display in-game advertisements. High scores are stored locally in an SQLite database.
						</div>
						<div class="fork">
							<img src="img/icons/github-small.png" class="fork-icon" />View on GitHub
						</div>
					</div>
					<div class="card" id="project-2">
						<div class="heading">3D Pool</div>
						<div class="desc">
							Simulated a 3D pool table using OpenGL and C++. Added sound and 3D texturing to make the game more realistic. Implemented C++ libraries to handle rigid body simulation, collision detection and impulse based collision response. Used the glut wrapper for OpenGL to render 3D objects with lighting effects to improve realism.
						</div>
						<div class="fork">
							<img src="img/icons/github-small.png" class="fork-icon" />View on GitHub
						</div>
					</div>
					<div class="card" id="project-3">
						<div class="heading">2D Basketball</div>
						<div class="desc">
							Created a 2D basketball simulation using OpenGL and C++. Added sound and texturing to make the game more realistic. Implemented C++ libraries to handle physics simulation, collision detection and event handling. Created an online database using PHP and mySQL that handled player login, registration and high score submission.
						</div>
						<div class="fork">
							<img src="img/icons/github-small.png" class="fork-icon" />View on GitHub
						</div>
					</div>
					<div id="heading" class="top-spacing">Class Projects</div>
					<div class="card first-card" id="project-4">
						<div class="heading">Network</div>
						<div class="desc">
							Implemented an AI in Java that plays the Network board game with a win rate of 95% against a random player. The AI uses mini-max with alpha-beta prunning to search the game tree for optimal moves. Implemented a variety of data structures in order to represent the game board. Implemented depth-first-search to search for a network.
						</div>
						<div class="fork">
							<img src="img/icons/github-small.png" class="fork-icon" />View on GitHub
						</div>
					</div>
					<div class="card" id="project-5">
						<div class="heading">Scheme Interpreter</div>
						<div class="desc">
							Implemented a fully functional Scheme interpreter in Python 3 with a REPL. Otimized the interpreter to support unlimited number of tail-recursive calls. Interfaced the interpreter with the Python turtle grpahics module to enable it to draw.
						</div>
						<div class="fork">
							<img src="img/icons/github-small.png" class="fork-icon" />View on GitHub
						</div>
					</div>